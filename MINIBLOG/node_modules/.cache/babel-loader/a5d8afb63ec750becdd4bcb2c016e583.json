{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { doc, getDoc } from \"firebase/firestore\";\nexport const useFetchDocument = (docCollection, id) => {\n  _s();\n\n  const [document, setDocument] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(null);\n  useEffect(() => {\n    const loadDocument = async () => {\n      setLoading(true);\n\n      try {\n        const docRef = await doc(db, docCollection, id);\n        const docSnap = await getDoc(docRef);\n        setDocument(docSnap.data());\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      }\n\n      setLoading(false);\n    };\n\n    loadDocument();\n  }, [docCollection, id]);\n  console.log(document);\n  return {\n    document,\n    loading,\n    error\n  };\n};\n\n_s(useFetchDocument, \"AI+WLh7S+On64DI1Iu5drhWNP7w=\");","map":{"version":3,"sources":["C:/Users/Eduardo/Documents/JS/react/MINIBLOG/miniblog/src/hooks/useFetchDocument.js"],"names":["useState","useEffect","db","doc","getDoc","useFetchDocument","docCollection","id","document","setDocument","error","setError","loading","setLoading","loadDocument","docRef","docSnap","data","console","log","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,oBAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,EAAhB,KAAuB;AAAA;;AACrD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,YAAY,GAAG,YAAY;AAC/BD,MAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,UAAI;AACF,cAAME,MAAM,GAAG,MAAMZ,GAAG,CAACD,EAAD,EAAKI,aAAL,EAAoBC,EAApB,CAAxB;AACA,cAAMS,OAAO,GAAG,MAAMZ,MAAM,CAACW,MAAD,CAA5B;AAEAN,QAAAA,WAAW,CAACO,OAAO,CAACC,IAAR,EAAD,CAAX;AACD,OALD,CAKE,OAAOP,KAAP,EAAc;AACdQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAC,QAAAA,QAAQ,CAACD,KAAK,CAACU,OAAP,CAAR;AACD;;AAEDP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAdD;;AAgBAC,IAAAA,YAAY;AACb,GAlBQ,EAkBN,CAACR,aAAD,EAAgBC,EAAhB,CAlBM,CAAT;AAoBAW,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,SAAO;AAAEA,IAAAA,QAAF;AAAYI,IAAAA,OAAZ;AAAqBF,IAAAA;AAArB,GAAP;AACD,CA5BM;;GAAML,gB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { doc, getDoc } from \"firebase/firestore\";\n\nexport const useFetchDocument = (docCollection, id) => {\n  const [document, setDocument] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  useEffect(() => {\n    const loadDocument = async () => {\n      setLoading(true);\n\n      try {\n        const docRef = await doc(db, docCollection, id);\n        const docSnap = await getDoc(docRef);\n\n        setDocument(docSnap.data());\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      }\n\n      setLoading(false);\n    };\n\n    loadDocument();\n  }, [docCollection, id]);\n\n  console.log(document);\n\n  return { document, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}