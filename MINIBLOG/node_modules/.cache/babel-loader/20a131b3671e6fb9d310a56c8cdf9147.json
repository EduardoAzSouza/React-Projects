{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\nconst initialState = {\n  loading: null,\n  error: null\n};\n\nconst insertReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOADING\":\n      return {\n        loading: true,\n        error: null\n      };\n\n    case \"INSERTED_DOC\":\n      return {\n        loading: false,\n        error: null\n      };\n\n    case \"ERROR\":\n      return {\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useInsertDocument = docCollection => {\n  _s();\n\n  const [response, dispatch] = useReducer(insertReducer, initialState); // deal with memory leak\n\n  const [cancelled, setCancelled] = useState(false);\n\n  const checkCancelBeforeDispatch = action => {\n    if (!cancelled) {\n      dispatch(action);\n    }\n  };\n\n  const insertDocument = async document => {\n    checkCancelBeforeDispatch({\n      type: \"LOADING\"\n    });\n\n    try {\n      const newDocument = { ...document,\n        createdAt: Timestamp.now()\n      };\n      const insertedDocument = await addDoc(collection(db, docCollection), newDocument);\n      checkCancelBeforeDispatch({\n        type: \"INSERTED_DOC\",\n        payload: insertedDocument\n      });\n    } catch (error) {\n      checkCancelBeforeDispatch({\n        type: \"ERROR\",\n        payload: error.message\n      });\n    }\n  };\n\n  useEffect(() => {\n    return () => setCancelled(true);\n  }, []);\n  return {\n    insertDocument,\n    response\n  };\n};\n\n_s(useInsertDocument, \"aGpufD8as+miNYZKmGUYm2CUF6M=\");","map":{"version":3,"sources":["C:/Users/Eduardo/Documents/JS/react/MINIBLOG/miniblog/src/hooks/useInsertDocument.js"],"names":["useState","useEffect","useReducer","db","collection","addDoc","Timestamp","initialState","loading","error","insertReducer","state","action","type","payload","useInsertDocument","docCollection","response","dispatch","cancelled","setCancelled","checkCancelBeforeDispatch","insertDocument","document","newDocument","createdAt","now","insertedDocument","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,oBAA9C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;;AAKA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEL,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAE;AAAxB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO;AAAED,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAED,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAhC,OAAP;;AACF;AACE,aAAOH,KAAP;AARJ;AAUD,CAXD;;AAaA,OAAO,MAAMI,iBAAiB,GAAIC,aAAD,IAAmB;AAAA;;AAClD,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBhB,UAAU,CAACQ,aAAD,EAAgBH,YAAhB,CAAvC,CADkD,CAGlD;;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMqB,yBAAyB,GAAIT,MAAD,IAAY;AAC5C,QAAI,CAACO,SAAL,EAAgB;AACdD,MAAAA,QAAQ,CAACN,MAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMU,cAAc,GAAG,MAAOC,QAAP,IAAoB;AACzCF,IAAAA,yBAAyB,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAzB;;AAEA,QAAI;AACF,YAAMW,WAAW,GAAG,EAAE,GAAGD,QAAL;AAAeE,QAAAA,SAAS,EAAEnB,SAAS,CAACoB,GAAV;AAA1B,OAApB;AAEA,YAAMC,gBAAgB,GAAG,MAAMtB,MAAM,CACnCD,UAAU,CAACD,EAAD,EAAKa,aAAL,CADyB,EAEnCQ,WAFmC,CAArC;AAKAH,MAAAA,yBAAyB,CAAC;AACxBR,QAAAA,IAAI,EAAE,cADkB;AAExBC,QAAAA,OAAO,EAAEa;AAFe,OAAD,CAAzB;AAID,KAZD,CAYE,OAAOlB,KAAP,EAAc;AACdY,MAAAA,yBAAyB,CAAC;AAAER,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,OAAO,EAAEL,KAAK,CAACmB;AAAhC,OAAD,CAAzB;AACD;AACF,GAlBD;;AAoBA3B,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAMmB,YAAY,CAAC,IAAD,CAAzB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAAEE,IAAAA,cAAF;AAAkBL,IAAAA;AAAlB,GAAP;AACD,CArCM;;GAAMF,iB","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\n\nconst initialState = {\n  loading: null,\n  error: null,\n};\n\nconst insertReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOADING\":\n      return { loading: true, error: null };\n    case \"INSERTED_DOC\":\n      return { loading: false, error: null };\n    case \"ERROR\":\n      return { loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const useInsertDocument = (docCollection) => {\n  const [response, dispatch] = useReducer(insertReducer, initialState);\n\n  // deal with memory leak\n  const [cancelled, setCancelled] = useState(false);\n\n  const checkCancelBeforeDispatch = (action) => {\n    if (!cancelled) {\n      dispatch(action);\n    }\n  };\n\n  const insertDocument = async (document) => {\n    checkCancelBeforeDispatch({ type: \"LOADING\" });\n\n    try {\n      const newDocument = { ...document, createdAt: Timestamp.now() };\n\n      const insertedDocument = await addDoc(\n        collection(db, docCollection),\n        newDocument\n      );\n\n      checkCancelBeforeDispatch({\n        type: \"INSERTED_DOC\",\n        payload: insertedDocument,\n      });\n    } catch (error) {\n      checkCancelBeforeDispatch({ type: \"ERROR\", payload: error.message });\n    }\n  };\n\n  useEffect(() => {\n    return () => setCancelled(true);\n  }, []);\n\n  return { insertDocument, response };\n};\n"]},"metadata":{},"sourceType":"module"}